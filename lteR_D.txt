To destroy virtual box completely using vagrant
first shutdown the virtualox...
$ vagrant halt
$ vagrant box list
$ vagrant remove <name> --all   (name what you got from running command $ vagrant box list )







we will setup our agw in VM. so we have to setup a virtual machine. To do that, lets use vagrant
we have to do some extra work in our host machine where vm will run.
..................................................................................................

install vagrant  .deb package** https://developer.hashicorp.com/vagrant/downloads 
install virtualbox 6.1. vagrant use virtualbox as default provider
$ sudo nano /etc/vbox/networks.conf
add the below line.....
* 10.0.0.0/8 192.168.0.0/16
* 2001::/64

..................................................................................................
now we install vagrant and virtual box.lets automatically configure vm using vagrant
go to any folder and create a file name Vagrantfile
$ touch Vagrantfile && nano Vagrantfile
copy the below content and put it into Vagrant file
Vagrant file content....................
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"

  config.vm.define :distromagma, autostart: false do |distromagma|
    distromagma.vm.hostname = "DISTRO-MAGMA-VM"
    distromagma.vm.network "private_network", ip: "192.168.60.171"
    distromagma.vm.network "private_network", ip: "192.168.129.1"

    distromagma.vm.provider "virtualbox" do |vb|
      vb.name = "nybsysdistrouplift"
      vb.linked_clone = true
      vb.customize ["modifyvm", :id, "--memory", "4048"]
      vb.customize ["modifyvm", :id, "--cpus", "4"]
      vb.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
    end
  end
end

now open a terminal where the Vagrantfile is.
$ vagrant up <name> (lets say name is distromagma)
this command will install a VM of ubuntu 20.04
.....................................................................................................

go to the newly created vm for agw with the below command

$ vagrant ssh <name>         (distromagma)
now we are into the vm.
$ip a
now we configure the network interface parameter with our name eth0,eth1,eth2.it will help us to debug letter
$ sudo su
$ sed -i 's/GRUB_CMDLINE_LINUX=""/GRUB_CMDLINE_LINUX="net.ifnames=0 biosdevname=0"/g' /etc/default/grub
$ sed -i 's/enp0s3/eth0/g' /etc/netplan/50-cloud-init.yaml
$ grub-mkconfig -o /boot/grub/grub.cfg

reboot the vm
$ reboot                                                                //VM command                    
$ vagrant up <name>               (distromagma)                         //host machine command
$ vagrant ssh <name>              (distromagma)                         //host machine command
$ ip a                                                                  //VM command
you can see the nework interface name changed
..............................................................................................................................................................
now we install all the dependency required to deploy agw in the VM. we will deploy dockerbase installation
ok lets deal with dependency
..............................................................................................................................................................

At first we need to install docker and docker-compose-plugin to vm ...................
to install docker go to docker download page and install it using command
$ sudo apt-get update
$ sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
$ sudo mkdir -p /etc/apt/keyrings
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
$ echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
$ sudo apt-get update
$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
Verify that the Docker Engine installation is successful by running the hello-world image
$ sudo docker run hello-world

install go............................
$ cd ~
$ curl -OL https://golang.org/dl/go1.18.3.linux-amd64.tar.gz
$ sudo tar -C /usr/local -xvf go1.18.3.linux-amd64.tar.gz              it extract the file in /usr/local directory
$ sudo nano ~/.profile                                    
add the below line to end of the line of the .profile file
export PATH=$PATH:/usr/local/go/bin
refresh the file
$ source ~/.profile
$ go version
go is installed. now you can delete the tar file which is downloaded in the home folder.

$ sudo apt update -y
$ sudo apt install -y make build-essential libssl-dev zlib1g-dev libbz2-dev    libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev  libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git

Clone pyenv repository.
$ git clone https://github.com/pyenv/pyenv.git ~/.pyenv
Configure pyenv.
$ echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
$ echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
$ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n eval "$(pyenv init -) "\nfi' >> ~/.bashrc
$ exec "$SHELL"

now you can use pyenv
$ pyenv install 3.8.10
$ pyenv global 3.8.10

install pip3 package manager and its dependecies
$ sudo apt install python3-pip -y
$ pip3 install ansible fabric3 jsonpickle requests PyYAML

now all the dependecy is installed. lets deploy magma agw now. before deploying agw it is better to reboot the vm as we are install so many dependency things
$ reboot                                                                //VM command                    
$ vagrant up <name>               (distromagma)                         //host machine command
$ vagrant ssh <name>              (distromagma)                         //host machine command
..................................................................................................................................

sudo -i
$ mkdir -p /var/opt/magma/certs
$ nano /var/opt/magma/certs/rootCA.pem             copy the content of rootCA.pem in this file
$ cd home
$ wget https://github.com/magma/magma/raw/v1.8/lte/gateway/deploy/agw_install_docker.sh
$ bash agw_install_docker.sh
now wait to finish deploying agw.....
depending your cpu and network speed it will take several minutes
.................................................................................................................................


sudo -i
nano /var/opt/magma/certs/rootCA.pem

cat << EOF | sudo tee /var/opt/magma/configs/control_proxy.yml
cloud_address: https://10.200.10.40
controller port: 9443
bootstrap_address: https://10.200.10.40
bootstrap_port: 8444
fluentd_address: https://10.200.10.40
fluentd_port: 24224

rootca_cert: /var/opt/magma/certs/rootCA.pem
EOF

cd /var/opt/magma/docker
sudo docker-compose up -d

docker exec magmad show_gateway_info.py

sudo docker-compose up -d --force-recreate























